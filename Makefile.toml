[env]
OVMF_DIR = "/usr/share/OVMF"
IMAGE = "disk.img"
GDB_PORT = "12345"


[tasks.build]
dependencies = [
  { name = "copy-efi", path = "bootloader" },
  { name = "build", path = "kernel" },
]


[tasks.run]
env = { "MAKE_PROFILE" = "release", QEMU_OPTS = "-monitor stdio" }
run_task = "qemu"

[tasks.run-dev]
env = { "MAKE_PROFILE" = "debug", QEMU_OPTS = "-monitor stdio" }
run_task = "qemu"

[tasks.debug]
env = { "MAKE_PROFILE" = "debug", QEMU_OPTS = "-monitor stdio -S -gdb tcp::${GDB_PORT}" }
run_task = "qemu"

[tasks.test]
env = { "MAKE_PROFILE" = "test", QEMU_OPTS = "-monitor none -display none" }
run_task = "qemu"

[tasks.test-console]
env = { "MAKE_PROFILE" = "test-console", QEMU_OPTS = "-monitor stdio" }
run_task = "qemu"

[tasks.gdb-attach]
script = '''
gdb kernel/kernel.elf -ex "target remote localhost:${GDB_PORT}"
'''

[tasks.qemu]
dependencies = ["build-disk", "prepare-ovmf"]
script = '''
qemu-system-x86_64 \
  -drive if=pflash,format=raw,file=./uefi-firmware/OVMF_CODE.fd \
  -drive if=pflash,format=raw,file=./uefi-firmware/OVMF_VARS.fd \
  -drive format=raw,media=disk,index=0,file=${IMAGE} \
  -device nec-usb-xhci,id=xhci \
  -device usb-mouse -device usb-kbd \
  -device isa-debug-exit ${QEMU_OPTS}
'''


[tasks.build-disk.run_task]
name = ["disk-init", "mount", "place-files"]
cleanup_task = "umount"
fork = true

[tasks.disk-init]
script = '''
qemu-img create -f raw "${IMAGE}" 200M
mkfs.fat -n "MANDARIN OS" -s 2 -f 2 -F 32 -R 32 "${IMAGE}"
'''

[tasks.mount]
script = '''
mkdir -p ./mnt
sudo mount -o loop "${IMAGE}" ./mnt
'''

[tasks.place-files]
dependencies = ["build"]
script = '''
sudo mkdir -p ./mnt/EFI/BOOT
sudo cp ./bootloader/BOOTX64.EFI ./mnt/EFI/BOOT/BOOTX64.EFI
sudo cp ./kernel/kernel.elf ./mnt/kernel.elf
'''

[tasks.umount]
script = "sudo umount ./mnt && rmdir ./mnt"


[tasks.prepare-ovmf.condition]
files_not_exist = [
  "${CARGO_MAKE_WORKING_DIRECTORY}/uefi-firmware/OVMF_CODE.fd",
  "${CARGO_MAKE_WORKING_DIRECTORY}/uefi-firmware/OVMF_VARS.fd",
]
[tasks.prepare-ovmf]
script = '''
mkdir -p ./uefi-firmware
cp ${OVMF_DIR}/OVMF_CODE.fd ${OVMF_DIR}/OVMF_VARS.fd ./uefi-firmware/
'''


[tasks.check]
dependencies = [
  { name = "check", path = "bootloader" },
  { name = "check", path = "kernel" },
]

[tasks.clean]
dependencies = [
  { name = "clean", path = "bootloader" },
  { name = "clean", path = "kernel" },
]
ignore_errors = true
script = '''
rm -r ./uefi-firmware ${IMAGE}
'''


[config]
skip_core_tasks = true

[tasks.default]
alias = "build"
